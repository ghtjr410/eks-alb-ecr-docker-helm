pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '017820660901'  // AWS Account ID를 직접 설정
        AWS_REGION = 'ap-northeast-2'  // AWS Region을 직접 설정
        ECR_REPO_NAME = 'admin-front'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        GIT_CREDENTIALS_ID = 'github-credentials'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/ghtjr410/eks-alb-ecr-docker-helm.git',
                    credentialsId: "${GIT_CREDENTIALS_ID}"
            }
        }
        stage('Build Docker Image') {
            when {
                changeset "admin-front/**"  // admin-front 디렉토리에 변경이 있는 경우에만 실행
            }
            steps {
                script {
                    docker.build("${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}", 'admin-front/.')
                }
            }
        }
        stage('Login to ECR') {
            when {
                changeset "admin-front/**"  // admin-front 디렉토리 변경이 있는 경우에만 실행
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        powershell '''
                            $Env:AWS_ACCESS_KEY_ID = '${AWS_ACCESS_KEY_ID}'
                            $Env:AWS_SECRET_ACCESS_KEY = '${AWS_SECRET_ACCESS_KEY}'
                            aws ecr get-login-password --region $Env:AWS_REGION | docker login --username AWS --password-stdin $Env:AWS_ACCOUNT_ID.dkr.ecr.$Env:AWS_REGION.amazonaws.com
                        '''
                    }
                }
            }
        }
        stage('Push Docker Image to ECR') {
            when {
                changeset "admin-front/**"  // admin-front 디렉토리 변경이 있는 경우에만 실행
            }
            steps {
                script {
                    docker.image("${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}").push()
                }
            }
        }
        // stage('Deploy to EKS') {
        //     when {
        //         changeset "admin-front/**"  // admin-front 디렉토리 변경이 있는 경우에만 실행
        //     }
        //     steps {
        //         script {
        //             bat 'helm upgrade --install my-release ./helm-chart --set image.repository=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME},image.tag=${IMAGE_TAG}'
        //         }
        //     }
        // }
    }
}