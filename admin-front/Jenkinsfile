pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '017820660901'  // AWS Account ID를 직접 설정
        AWS_REGION = 'ap-northeast-2'  // AWS Region을 직접 설정
        ECR_REPO_NAME = 'admin-front'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        GIT_CREDENTIALS_ID = 'github-credentials'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/ghtjr410/eks-alb-ecr-docker-helm.git',
                    credentialsId: "${GIT_CREDENTIALS_ID}"
            }
        }
        stage('Check Tools') {
            steps {
                bat '''
                    aws --version
                    docker --version
                '''
            }
        }
        stage('Print AWS Identity') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials') {
                    bat '''
                        aws sts get-caller-identity
                    '''
                }
            }
        }
        stage('Login to ECR') {
            when {
                changeset "admin-front/**"
            }
            steps {
                // AWS 자격 증명을 안전하게 설정
                withCredentials([ 
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    powershell '''
                        $password = aws ecr get-login-password --region ${env.AWS_REGION}
                        if ($password) {
                            Write-Host "Successfully retrieved ECR password."
                            $password | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com
                            if ($LASTEXITCODE -eq 0) {
                                Write-Host "Docker login succeeded."
                            } else {
                                Write-Error "Docker login failed."
                                exit 1
                            }
                        } else {
                            Write-Error "Failed to retrieve ECR password."
                            exit 1
                        }
                    '''
                }
            }
        }
        stage('Verify ECR Login') {
            when {
                changeset "admin-front/**"
            }
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials') {
                    bat '''
                        aws ecr describe-repositories --region ap-northeast-2
                        if %ERRORLEVEL% EQU 0 (
                            echo Successfully listed ECR repositories.
                        ) else (
                            echo Failed to list ECR repositories.
                            exit /b 1
                        )
                    '''
                }
            }
        }

        // stage('Build Docker Image') {
        //     when {
        //         changeset "admin-front/**"
        //     }
        //     steps {
        //         script {
        //             docker.build("${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}", 'admin-front/.')
        //         }
        //     }
        // }
        // stage('Login to ECR') {
        //     when {
        //         changeset "admin-front/**"
        //     }
        //     steps {
        //         // AWS 자격 증명을 안전하게 설정
        //         withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials') {
        //             powershell '''
        //                 aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 017820660901.dkr.ecr.ap-northeast-2.amazonaws.com
        //             '''
        //         }
        //     }
        // }
        // stage('Push Docker Image to ECR') {
        //     when {
        //         changeset "admin-front/**"
        //     }
        //     steps {
        //         script {
        //             docker.image("${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}").push()
        //         }
        //     }
        // }
        // stage('Deploy to EKS') {
        //     when {
        //         changeset "admin-front/**"  // admin-front 디렉토리 변경이 있는 경우에만 실행
        //     }
        //     steps {
        //         script {
        //             bat 'helm upgrade --install my-release ./helm-chart --set image.repository=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME},image.tag=${IMAGE_TAG}'
        //         }
        //     }
        // }
    }
}